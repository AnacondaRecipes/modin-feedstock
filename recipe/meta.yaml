{% set name = "modin" %}
{% set version = "0.33.2" %}

package:
  name: {{ name }}-packages
  version: {{ version }}

source:
  url: https://github.com/modin-project/{{ name }}/archive/refs/tags/{{ version }}.tar.gz
  sha256: 6d463fff9dfe49ecd0456d977297b3e40f2a3a0790b1845011c9180ab8f08f4d

build:
  number: 0
  skip: true  # [py<39]
requirements:
  host:
    - pip
    - python
    - setuptools
    - wheel

# the outputs map the modin extras on PyPI (see upstream definition
# https://github.com/modin-project/modin/blob/0.10.1/setup.py#L40-L45)
# from "modin[<extra>]" to "modin-<extra>" as a conda-forge package.
outputs:
  - name: modin-all
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - {{ pin_subpackage('modin-dask', exact=True) }}
        - {{ pin_subpackage('modin-ray', exact=True) }}  # [py<313]
        - {{ pin_subpackage('modin-mpi', exact=True) }}
    test:
      imports:
        # dummy test; actual tests are in subpackages
        - modin

  # compatibility with packagename before split into options
  - name: modin
    requirements:
      host:
        - python
      run:
        - python
        # modin needs at least one engine; use dask as it is more light-weight than ray
        - {{ pin_subpackage('modin-dask', exact=True) }}
    test:
      requires:
        - pip
        - typing_extensions
      commands:
        - pip check
        - python -c "from importlib.metadata import version; assert(version('{{ name }}')=='{{ version }}')"
      imports:
        - modin
        - modin.pandas
        - modin.config
        - modin.core
        - modin.logging
        - modin.polars
        - modin.pandas
        - modin.numpy
        - modin.db_conn
        - modin.distributed
        - modin.error_message

  - name: modin-core
    script: build_base.bat  # [win]
    script: build_base.sh   # [not win]
    requirements:
      host:
        - pip
        - python
        - setuptools
        - wheel
      run:
        - python
        - packaging >=21.0
        - pandas >=2.2,<2.3
        - numpy >=1.22.4
        - fsspec >=2022.11.0
        - psutil >=5.8.0
      run_constrained:
        # numexpr 2.8.5 breaks pandas, see below for context:
        # https://github.com/modin-project/modin/pull/7296
        # https://github.com/modin-project/modin/issues/6469
        - numexpr !=2.8.5
        - dataframe-api-compat >=0.2.7
        - modin-spreadsheet >=0.1.0
    test:
      source_files:
        - modin
      imports:
        - modin
        - modin.pandas
        - modin.config
        - modin.core
        - modin.logging
        - modin.polars
        - modin.pandas
        - modin.numpy
        - modin.db_conn
        - modin.distributed
        - modin.error_message
      requires:
        - pip
        - distributed >=2.22.0
        - dask >=2.22.0
        - pytest >=7.3.2
        - boto3
        - requests
        - matplotlib >=3.6.3
        - xarray >=2022.03.0
        - pyarrow >=10.0.1
        - s3fs >=2022.11.0
        - numexpr !=2.8.5
        - scipy >=1.10
      commands:
        - pip check
        # Running subset of tests sourced from https://github.com/modin-project/modin/blob/0.33.1/.github/workflows/ci.yml#L640-L700
        - pytest modin/tests/pandas/test_rolling.py
        - pytest modin/tests/pandas/test_expanding.py
        - pytest modin/tests/pandas/test_reshape.py
        - pytest modin/tests/pandas/test_general.py
        - pytest modin/tests/pandas/test_concat.py
        - pytest modin/tests/pandas/internals
        - pytest modin/tests/pandas/extensions
        - pytest modin/tests/interchange
        - pytest modin/tests/test_partition_api.py
        - pytest modin/tests/pandas/dataframe/test_binary.py
        - pytest modin/tests/pandas/dataframe/test_iter.py
        - pytest modin/tests/pandas/dataframe/test_reduce.py
        - pytest modin/tests/pandas/dataframe/test_window.py
        - pytest -m "not exclude_in_sanity" modin/tests/pandas/dataframe/test_map_metadata.py
        # test__reduce__ -> Exception: AttributeError("'NoneType' object has no attribute 'id'")
        - pytest -k "not test__reduce__" -m "not exclude_in_sanity" modin/tests/pandas/test_series.py
        # test_aggregate_error_checking -> Failed: DID NOT WARN. No warnings of type (<class 'UserWarning'>,) were emitted.
        - pytest -k "not test_aggregate_error_checking" modin/tests/pandas/dataframe/test_udf.py
        # test__reduce__ / test_column_pickle[False] -> Exception: AttributeError("'NoneType' object has no attribute 'id'")
        - pytest -k "not (test__reduce__ or test_column_pickle[False])" modin/tests/pandas/dataframe/test_pickle.py
        # distributed.client.FutureCancelledError: lambda-e573d03bd8c1f5ca9746a2d478b5dca7 cancelled for reason: unknown
        # - pytest modin/tests/pandas/dataframe/test_default.py

  - name: modin-dask
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - dask >=2.22.0
        - distributed >=2.22.0
    test:
      requires:
        - typing_extensions
      imports:
        - modin
        - modin.pandas
        - modin.config
        - modin.core
        - modin.logging
        - modin.polars
        - modin.pandas
        - modin.numpy
        - modin.db_conn
        - modin.distributed
        - modin.error_message
      commands:
        - python -c "import modin.pandas as pd, modin.config as cfg; cfg.Engine.put('dask'); df = pd.DataFrame([])"
  
  - name: modin-ray
    build:
      # current available version of ray(2.37.0) in channels, doesn't support py3.13
      # https://github.com/ray-project/ray/blob/ray-2.37.0/python/setup.py#L30
      skip: true  # [py>312]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - ray-default >=2.10.0,<3
        - pyarrow >=10.0.1
    test:
      imports:
        - modin
        - modin.pandas
        - modin.config
        - modin.core
        - modin.logging
        - modin.polars
        - modin.pandas
        - modin.numpy
        - modin.db_conn
        - modin.distributed
        - modin.error_message
      commands:
        - python -c "import os; os.environ['MODIN_CPUS'] = '4'; import modin.pandas as pd, modin.config as cfg; cfg.Engine.put('ray'); df = pd.DataFrame([])"

  - name: modin-mpi
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - unidist-mpi >=0.2.1
    test:
      requires:
        - typing_extensions
      imports:
        - modin
        - modin.pandas
        - modin.config
        - modin.core
        - modin.logging
        - modin.polars
        - modin.pandas
        - modin.numpy
        - modin.db_conn
        - modin.distributed
        - modin.error_message
      # Hard to run tests for modin-mpi due to config
      # https://github.com/modin-project/modin/blob/0.33.1/.github/workflows/ci.yml#L601-L602

about:
  home: https://github.com/modin-project/modin
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: Scale your pandas workflows by changing one line of code
  description: |
    Modin is a drop-in replacement for pandas.
    While pandas is single-threaded, Modin lets you instantly speed up your workflows 
    by scaling pandas so it uses all of your cores. Modin works especially well on larger datasets, 
    where pandas becomes painfully slow or runs out of memory.
  doc_url: https://modin.readthedocs.io
  dev_url: https://github.com/modin-project/modin

extra:
  recipe-maintainers:
    - devin-petersohn
    - h-vetinari
    - vnlitvinov
    - maksimbo1