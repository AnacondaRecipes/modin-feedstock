{% set version = "0.33.1" %}

package:
  name: modin-packages
  version: {{ version }}

source:
  url: https://github.com/modin-project/modin/archive/refs/tags/{{ version }}.tar.gz
  sha256: e18fb1dc9ef2cd6e528fcacf20563a64b7dd148ccae118b2f6260bc5b5feefac

build:
  number: 0
  skip: true  # [py<39]
requirements:
  host:
    - pip
    - python
    - setuptools
    - wheel

# the outputs map the modin extras on PyPI (see upstream definition
# https://github.com/modin-project/modin/blob/0.10.1/setup.py#L40-L45)
# from "modin[<extra>]" to "modin-<extra>" as a conda-forge package.
outputs:
  - name: modin-all
    build:
      skip: true  # [py<39]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - {{ pin_subpackage('modin-dask', exact=True) }}
        # Disable modin-mpi bec unidist-packages-feedstock isn't available on the main channel
        #- {{ pin_subpackage('modin-mpi', exact=True) }}
        # ray doesn't support 3.13 yet: https://github.com/ray-project/ray/issues/47933
        - {{ pin_subpackage('modin-ray', exact=True) }}  # [py<313]
    test:
      imports:
        - modin
        - modin.pandas
        - modin.config
        - modin.core

  # compatibility with packagename before split into options
  - name: modin
    build:
      skip: true  # [py<39]
    requirements:
      host:
        - python
      run:
        - python
        # modin needs at least one engine; use dask as it is more light-weight than ray
        - {{ pin_subpackage('modin-dask', exact=True) }}
    test:
      requires:
        - pip
        - typing_extensions
      commands:
        - pip check
        - python -c "from importlib.metadata import version; assert(version('modin')=='{{ version }}')"
      imports:
        - modin
        - modin.pandas
        - modin.config
        - modin.core

  - name: modin-core
    build:
      skip: true  # [py<39]
      script: {{ PYTHON }} -m pip install . --no-deps --no-build-isolation --ignore-installed -vv
    requirements:
      host:
        - pip
        - python
        - setuptools
        - wheel
      run:
        - python
        - packaging >=21.0
        - pandas >=2.2,<2.3
        - numpy >=1.22.4
        - fsspec >=2022.11.0
        - psutil >=5.8.0
      run_constrained:
        - dataframe-api-compat >=0.2.7
        - modin-spreadsheet >=0.1.0
    test:
      source_files:
        - modin
      imports:
        - modin
        - modin.pandas
        - modin.config
        - modin.core
      requires:
        - pip
        - distributed >=2.22.0
        - dask >=2.22.0
        - pytest >=7.3.2
        - boto3
        - requests
        - matplotlib-base >=3.6.3
        - xarray >=2022.03.0
        - pyarrow >=10.0.1
        - s3fs >=2022.11.0
        - numexpr <2.8.5  # [py<312]
        - scipy >=1.10
      commands:
        # Skip pip check on win due to strict dependency in docker-py
        - pip check  # [not win]
        # Running subset of tests sourced from https://github.com/modin-project/modin/blob/0.33.1/.github/workflows/ci.yml#L548
        - pytest modin/tests/pandas/dataframe/test_udf.py  # [py<312]
        # Skip test__reduce__ and test_column_pickle[False] because they failed with AssertionsError and have underlying issues with the dask's distributed package.
        - pytest modin/tests/pandas/dataframe/test_reduce.py modin/tests/pandas/dataframe/test_window.py modin/tests/pandas/dataframe/test_pickle.py -k "not (test__reduce__ or test_column_pickle[False])" modin/tests/pandas/dataframe/test_binary.py modin/tests/pandas/dataframe/test_iter.py  # [not win]
        - pytest -m "not exclude_in_sanity" modin/tests/pandas/test_series.py -k "not (cat_categories or test__reduce__)"
        - pytest -m "not exclude_in_sanity" modin/tests/pandas/dataframe/test_map_metadata.py modin/tests/pandas/test_expanding.py modin/tests/pandas/test_reshape.py modin/tests/pandas/test_general.py modin/tests/pandas/test_concat.py  # [not win]
        - pytest modin/tests/interchange/dataframe_protocol/test_general.py modin/tests/pandas/test_concat.py modin/tests/interchange/dataframe_protocol/pandas/test_protocol.py modin/tests/pandas/test_rolling.py
        - pytest -v modin/tests/pandas/extensions modin/tests/pandas/native_df_interoperability modin/tests/pandas/internals
        - pytest -v modin/tests/numpy
        - pytest -v modin/tests/interchange

        # - pytest -v modin/tests/pandas/integrations - to remove
        # - pytest -v modin/tests/core -- weird


  - name: modin-dask
    build:
      skip: true  # [py<39]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - dask >=2.22.0
        - distributed >=2.22.0
    test:
      imports:
        - modin
        - modin.pandas
        - modin.config
        - modin.core
      requires:
        - typing_extensions
      commands:
        - python -c "import modin.pandas as pd, modin.config as cfg; cfg.Engine.put('dask'); df = pd.DataFrame([])"

  - name: modin-ray
    build:
      # ray-default isn't available on linux or python 3.13
      skip: true  # [py<39 or py>312 or linux]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - ray-default >=2.10.0,<3
        - pyarrow >=10.0.1
        # ray-core is missing async-timeout.
        # Once that's fixed, we can remove this dependency.
        - async-timeout
    test:
      imports:
        - modin
        - modin.pandas
        - modin.config
        - modin.core
      commands:
        # ray.init() can stuck at "Started a local Ray instance." on Windows, see https://github.com/ray-project/ray/issues/37373 and https://github.com/ray-project/ray/issues/46396
        # It's a RAM related issue, because you can get warnings like this on Unix:
        # 'UserWarning: The size of /dev/shm is too small (6133071872 bytes). The required size at least half of RAM (6804715520 bytes).'
        - python -c "import modin.pandas as pd, modin.config as cfg; cfg.Engine.put('ray'); df = pd.DataFrame([])"  # [not win]

  - name: modin-mpi
    build:
      # unidist-packages-feedstock isn't available
      skip: true
    requirements:
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - unidist-mpi >=0.2.1
    test:
      imports:
        - modin
        - modin.pandas

about:
  home: https://github.com/modin-project/modin
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: Scale your pandas workflows by changing one line of code
  description: |
    Modin is a drop-in replacement for pandas.
    While pandas is single-threaded, Modin lets you instantly speed up your workflows 
    by scaling pandas so it uses all of your cores. Modin works especially well on larger datasets, 
    where pandas becomes painfully slow or runs out of memory.
  doc_url: https://modin.readthedocs.io/
  dev_url: https://github.com/modin-project/modin

extra:
  recipe-maintainers:
    - devin-petersohn
    - h-vetinari
    - vnlitvinov
    - maksimbo1
  feedstock-name: modin
